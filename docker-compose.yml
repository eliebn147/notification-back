services:
  rabbitmq-docker:
    container_name: rabbitmq-docker
    image: rabbitmq:3.13.1-management
    ports:
      - "5672:5672" # RabbitMQ broker port
      - "15672:15672" # RabbitMQ management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=myuser
      - RABBITMQ_DEFAULT_PASS=mypassword

  postgresql-docker:
    container_name: postgres-docker
    image: postgres # It's good practice to pin to a specific version for stability
    ports:
      - "5432:5432" # PostgreSQL default port
    environment:
      - POSTGRES_DB=notification # Database name: 'notification'
      - POSTGRES_USER=postgres # Database user: 'postgres'
      - POSTGRES_PASSWORD=password # Database password: 'password'
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data outside the container

  notification-service:
    container_name: notification-service-docker
    image: eliebn/notification-app # Your built notification service image
    ports:
      - "8081:8081" # Expose your app port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - rabbitmq-docker # Wait for RabbitMQ to be healthy

  notification-back:
    container_name: notification-back-docker
    image: eliebn/notification-back # Your built notification service image
    ports:
      - "8080:8080" # Expose your app port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - rabbitmq-docker # Wait for RabbitMQ to be healthy
      - postgresql-docker # Wait for RabbitMQ to be healthy

  notification-front:
    container_name: notification-front-docker
    image: eliebn/notification-front # Your built notification service image
    ports:
      - "80:80" # Expose your app port
    depends_on:
      - notification-back # Wait for RabbitMQ to be healthy

volumes:
  postgres_data: # Define the named volume for PostgreSQL data